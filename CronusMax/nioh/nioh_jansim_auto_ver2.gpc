
// auto-jansim switch : XB1_RB + XB1_LB
// 일반 status화면에서는 오토 잔심을 꺼야 하기 때문
int ajSwitch = FALSE;

// ajSwitch가 켜진 상태에서 X 또는 Y를 누르면
// xySwitch가 켜진다.
// 그리고, 자동잔심이 끝나면 xySwitch가 꺼진다.
int xySwitch = FALSE;

// xyTime은 마지막으로 눌러진 X 또는 Y의 시간부터
// 밀리초 시간을 저장한다.
// xyTime이 xyEnd를 넘으면 xyEnd 시간동안 새로운 
// X 또는 Y 버튼이 안눌려진 것으로,
// 그때가 자동잔심을 실행할 시기이다.
// 따라서, xyEnd 값은 게임내에서 칼질이 더이상 
// 연속입력이 되지 않는 시간을 지정해야 한다.
// default값은 0.5초로 하자.
int xyTime = 0;
int xyEnd  = 800; // 대태도 최적화

// nx, ny는 xySwitch가 켜지면서 눌려진
// X, Y 버튼의 횟수이다.
int nxy = 0;

// tx, ty는 X공격 또는 Y공격에 의한 기력소모에 의해
// 잔심을 해야할 타이밍을 알아서 조절하는 시간이다.
// 대태도를 예로 우선 X공격 한번에 0.3초, Y공격 한번에  0.35초로
// 지정해 둔다.
// 따라서 이 수치는 무기의 종류에 따라 기력소모가 달라지고,
// 무기의 기력소모 감소 옵션에 따라 달라지기 때문에 
// 각각에 맞게 최적화 되어야 한다.
int t1 = 600; int t2 = 400; // 대태도 최적화

// nx*tx + ny*ty를 계산한 시간
// wait 커맨드 안에서 계산하면 올바른 동작이 되지 않는다.
int waitTime = 0;

main() {

    if (get_val(XB1_RB)) {
        if (event_press(XB1_LB)) {
            ajSwitch = TRUE;
        } else if (event_press(XB1_LT)) {
            ajSwitch = FALSE;
        }
    }

/*
    if (get_val(XB1_RB) && get_val(XB1_LB)) {
        if (event_press(XB1_X)) {
            tx = tx - 100;
            if (tx < 100) tx = 100;
        }   
        if (event_press(XB1_Y)) {
            tx = tx + 100;
            if (tx > 1000) tx = 1000;
        }         
    }
*/    
    if ((event_press(XB1_X) || event_press(XB1_Y)) && ajSwitch) {
        if (!xySwitch) {
            xySwitch = TRUE;
            xyTime = 0;
            nxy = nxy + 1;
        } else if (xyTime < xyEnd) {
            xyTime = 0;
            nxy = nxy + 1;
        }
    }

    if (xySwitch) {
        xyTime = xyTime + get_rtime();
    }
    if (xyTime > xyEnd) {
        combo_run(jansim);
    }
}

combo jansim {
    waitTime = t1 + (nxy-1)*t2;
    set_val(TRACE_3,waitTime/100);
    set_val(XB1_RB, 0);
    wait(waitTime);
    set_val(XB1_RB, 100);
    wait(100);    
    xySwitch = FALSE;
    xyTime = 0;
    nxy = 0;   
}
